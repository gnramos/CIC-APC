/**      @file: 13-ponteiros.txt
 *     @author: Gabriel Guimarães Almeida de Castro
 * @disciplina: Algoritmos e Programação de Computadores
 *
 * Exemplo de equivalência de ponteiros em pseudocódigo. */

Algoritmo 13-ponteiros

Constantes
    N <- 2, M <- 4 : inteiro
Variaveis
    v[][], i, j: inteiro

CriaFuncao Mostra(v[][M])

    Para i de 1 a N ++i
        Para j de M ++j
            Escreva ("     ", v[i][j])
        FimPara
    FimPara
    
FimMostra

CriarFuncao f0(**      v, i, j) 
    v[i][j] <- 0
Fimf0 

CriaFuncao f1(*       v, i, j) 
    v[i*M + j] <- 1
Fimf1

CriaFuncao f2((* v)[M], i, j) 
    v[i][j] <- 2
Fimf2

CriaFuncao f3(int   v[][M], int i, int j) 
    v[i][j] <- 3
Fimf3

Inicio
    v[N][M] <- {{-1,-1,-1,-1}, {-1,-1,-1,-1}};

    mostra(v)
    /*f0( v, 1, 0)  mostra(v)*/
    f1(*v, 1, 1) mostra(v)
    f2(v, 1, 2) mostra(v)
    f3( v, 1, 3) mostra(v)
Fim


/* f0 não funciona em c, pois cada elemento do vetor não é necessariamente um
endereço válido de memória (certamente não com os valores dados.

   f1 funciona em c pois a linguagem C aloca os elementos sequencialmente na memória,
portanto pode-se considerar a matriz como um grande vetor de NxM elementos.

   f2 e f3 funcionam em c,pois o tamanho de cada elemento é definido na declaração da função. */
